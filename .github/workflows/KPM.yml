name: Build kernels KPM

on:
  # push:
    # paths:
      # - ".github/workflows/build.yml"
  workflow_dispatch:
  schedule:
    - cron: "30 21 * * 5"

jobs:
  Read-configuration:
    name: üêÇ Parse *.config.json
    runs-on: ubuntu-latest
    outputs:
      CONFIGS: ${{ steps.generate-matrix.outputs.CONFIGS }}
      BUILD_DATE: ${{ steps.generate-builddate.outputs.BUILDDATE }}
    steps:
      # This action checks-out your CONFIGSitory under $GITHUB_WORKSPACE, so your workflow can access it.
      - name: üòÑ Checkout
        uses: actions/checkout@v4

      # Match the configuration files in the CONFIGS directory, read the contents and merge them into an array.
      - name: üòÜ Generate Matrix
        id: generate-matrix
        run: |
          echo "CONFIGS<<EOF" >> $GITHUB_OUTPUT
          jq -s '[.[][]]' Kernel/configs/*.config.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Set compile time.
      - name: ‚è∞ Set builddate
        id: generate-builddate
        run: echo "BUILDDATE=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "üêé Build kernel"
    runs-on: ubuntu-22.04
    needs:
      - Read-configuration
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        CONFIG: ${{ fromJSON(needs.Read-configuration.outputs.CONFIGS) }}
    env:
      # Basic configuration
      WORKSPACE: ${{ github.workspace }}
      BUILD_DATE: "${{ needs.Read-configuration.outputs.BUILD_DATE }}"

      # Kernel source configuration
      KERNEL_NAME: ${{ matrix.CONFIG.kernelSource.name }}
      KERNEL_REPO: ${{ matrix.CONFIG.kernelSource.repo }}
      KERNEL_BRANCH: ${{ matrix.CONFIG.kernelSource.branch }}
      KERNEL_DEVICE: ${{ matrix.CONFIG.kernelSource.device }}
      KERNEL_DEFCONFIG_PATH: ${{ matrix.CONFIG.kernelSource.defconfig }}

      # Whether to use ccache to speed up compilation
      ENABLE_CCACHE: ${{ matrix.CONFIG.enableCcache }}

      # Whether to use ANYKERNEL3 packaged flash package
      USE_ANYKERNEL3: ${{ matrix.CONFIG.AnyKernel3.use }}

      # Whether to publish
      CONFIRM_RELEASE: ${{ matrix.CONFIG.AnyKernel3.release }}

      # Whether to enable KernelSU
      ENABLE_KERNELSU: ${{ matrix.CONFIG.enableKernelSU }}

      # Whether to enable KernelSU SFS
      ENABLE_KERNELSU_SFS: ${{ matrix.CONFIG.KernelSUSFS.enable }}

      # Set output & ccache directory
      OUT_DIR: "${{ github.workspace }}/out"
      CCACHE_DIR: "${{ github.workspace }}/ccache"
    steps:
      # Set swap space
      - name: üìê Set swap to 10G
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      # This action checks-out your CONFIGSitory under $GITHUB_WORKSPACE, so your workflow can access it.
      - name: üòÑ Checkout
        uses: actions/checkout@v4

      # Install prerequisites for Ubuntu
      - name: ‚≠ê Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache python2 python2-dev python3
          sudo apt-get install -y pngcrush schedtool dpkg-dev liblz4-tool make optipng maven dwarves device-tree-compiler 
          sudo apt-get install -y libc6-dev-i386 libelf-dev lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc
          sudo apt-get install -y libxml2-utils libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools lzop flex tree
          sudo apt-get install -y build-essential bc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev
          sudo apt-get install -y pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl 
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar llvm g++-multilib bison gperf zlib1g-dev automake

      # Initialize ccache
      - name: üöÑ Setup ccache
        if: ${{ env.ENABLE_CCACHE == 'true' }}
        id: hash
        run: |
          # Create output directory
          mkdir -p ${{ env.OUT_DIR }}

          # Initialize ccache
          ccache -o compression=false -o cache_dir=${{ env.CCACHE_DIR }}

          # Generate configuration's hash
          echo $(echo -n '${{ toJSON(matrix.config) }}' | openssl dgst -sha1 | awk '{print $2}')
          echo "HASH=$(echo -n '${{ toJSON(matrix.config) }}' | openssl dgst -sha1 | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: üöÖ Cache ccache & output
        env:
          HASH: ${{ steps.hash.outputs.HASH }}
        if: ${{ env.ENABLE_CCACHE == 'true' }}
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.OUT_DIR }}
            ${{ env.CCACHE_DIR }}
          key: cache-${{ env.KERNEL_NAME }}-${{env.HASH}}-${{ env.BUILD_DATE }}
          restore-keys: |
            cache-${{ env.KERNEL_NAME }}-${{env.HASH}}-${{ env.BUILD_DATE }}
            cache-${{ env.KERNEL_NAME }}-${{env.HASH}}-
            cache-${{ env.KERNEL_NAME }}-

      - name: üåü Clone kernel source => (${{ env.KERNEL_REPO }})
        run: |
          git clone --recursive --depth=1 -j $(nproc) --branch ${{ env.KERNEL_BRANCH }} ${{ env.KERNEL_REPO }} ${{ env.KERNEL_NAME }}
          # tree ${{ env.KERNEL_NAME }}

      - name: üí´ Get toolchains
        env:
          toolchains: "${{ toJSON(matrix.CONFIG.toolchains) }}"
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          echo "ü§î There is $toolchains_num defined toolchains."

          for ((i=0;i<toolchains_num;i++)); do
            toolchain=$(echo $toolchains | jq -r ".[$i]")

            toolchain_name=$(echo $toolchain | jq -r ".name")
            
            # From archive
            if echo $toolchain | jq -e 'has("url")' > /dev/null; then
              # If from archive
              toolchain_url=$(echo $toolchain | jq -r ".url")
              mkdir -p $toolchain_name

              # Download archive
              wget -q "$toolchain_url"

              # Get filename
              filename="${toolchain_url##*/}"
              case "$filename" in
                *.zip)
                  unzip -d $toolchain_name "$filename"
                  ;;
                *.tar)
                  tar xvf "$filename" -C $toolchain_name
                  ;;
                *.tar.gz)
                  tar zxvf "$filename" -C $toolchain_name
                  ;;
                *.rar)
                  unrar x "$filename" $toolchain_name
                  ;;
                *)
                  echo "unknown file type: $filename"
                  ;;
              esac
              # Delete file to avoid duplicate name conflicts 
              rm $filename

              echo "ü§î Download $toolchain_name => ($toolchain_url)"
            else
              # If from git
              toolchain_repo=$(echo $toolchain | jq -r ".repo")
              toolchain_branch=$(echo $toolchain | jq -r ".branch")
              git clone --recursive --depth=1 -j $(nproc) --branch $toolchain_branch $toolchain_repo $toolchain_name

              echo "ü§î Clone $toolchain_name => ($toolchain_repo)"
            fi

            jq -r ".binaryEnv[] | tostring" <<< "$toolchain" | while read -r subPath; do
              echo "${{ env.WORKSPACE }}/$toolchain_name/$subPath" >> $GITHUB_PATH
            done
          done

      - name: üòé Set build args
        id: generate-args
        env:
          PARAMS: "${{ toJSON(matrix.CONFIG.params) }}"
          THREAD: $(nproc --all)
        run: |
          echo "ü§î PATH Variable: $PATH"

          ARCH=$(echo $PARAMS | jq -r ".ARCH")
          CC=$(echo $PARAMS | jq -r ".CC")

          args="-j${{ env.THREAD }} O=${{ env.OUT_DIR }} ARCH=$ARCH"
          if [ -n "$CC" ]; then

            if [[ "$CC" == *"/"* ]]; then
              CC=${{ env.WORKSPACE }}/$CC
            fi

            if [ ${{ env.ENABLE_CCACHE }} = true ]; then
              args="$args CC=\"ccache $CC\""
            else
              args="$args CC=$CC"
            fi
          fi
          while read -r externalCommand; do
            key=$(echo "$externalCommand" | cut -d= -f1)
            value=$(echo "$externalCommand" | cut -d= -f2)
            if [[ "$value" == *"/"* ]]; then
              value="${{ env.WORKSPACE }}/$value"
            fi
            args="$args $key=$value"
          done < <(jq -r '.externalCommands | to_entries[] | "\(.key)=\(.value)"' <<< "$PARAMS")

          echo "ARCH=$ARCH" >> $GITHUB_OUTPUT
          echo "ARGS=$args" >> $GITHUB_OUTPUT

          echo "ü§î $args"

      - name: üòã Setup KernelSU
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
        if: ${{ env.ENABLE_KERNELSU == 'true' }}
        run: |
          # Delete old KernelSU
          if [ -d "./KernelSU" ]; then
            rm -rf "./KernelSU"
          fi
          if [ -d "./drivers/kernelsu" ]; then
            rm -rf "./drivers/kernelsu"
          fi

          # Apply new KernelSU patches
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          
      - name: üòã Setup KSU SUSFS
        env: 
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
          SFS_BRANCH: ${{ matrix.CONFIG.KernelSUSFS.branches }}
        if: ${{ env.ENABLE_KERNELSU == 'true' && env.ENABLE_KERNELSU_SFS == 'true' }}
        run: |
          # Clone repositories using the branch names
          git clone https://github.com/ShirkNeko/susfs4ksu.git -b "${{ env.SFS_BRANCH }}"
          git clone https://github.com/liqidecg/SukiSU_patch.git

          # Copy SUSFS patches
          cd ${{ env.KERNEL_NAME }}
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_${{ env.SFS_BRANCH }}.patch ./
          cp ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/

          patch -p1 < 50_add_susfs_in_${{ env.SFS_BRANCH }}.patch || true

          # Apply New Hooks Patches
          cp ../SukiSU_patch/hooks/sukisu_tracepoint_hooks.patch ./
          patch -p1 -F 3 < sukisu_tracepoint_hooks.patch

          # Add SUSFS configuration settings
          echo "CONFIG_KSU=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KPM=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_TRACEPOINT_HOOK=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          
          echo "CONFIG_KSU_SUSFS=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          sed -i '$s|echo "\$res"|echo "\$res-King"|' ./scripts/setlocalversion

          cat arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          
      - name: üßπ Commit to avoid dirty
        working-directory: ${{ env.KERNEL_NAME }}
        run: |
          rm android/abi_gki_protected_exports_* || echo "No protected exports!"
          git config --global user.email "bot@kernelsu.org"
          git config --global user.name "KernelSUBot"
          git add -A && git commit -a -m "Add KernelSU"

      - name: üëç Start building the kernel
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          ARGS: ${{ steps.generate-args.outputs.ARGS }}
        run: |
          echo "ü§î PATH Variable: $PATH"
          export KBUILD_BUILD_TIMESTAMP="Wed Oct 25 05:41:09 UTC 2023"
          export KBUILD_BUILD_HOST=Github-Action
          export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
          make ${{ env.ARGS }} ${{ env.KERNEL_DEFCONFIG_PATH }}
          make ${{ env.ARGS }}
          # tree ${{ env.OUT_DIR }}

      - name: üíõ Upload Image
        uses: actions/upload-artifact@v4
        env:
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-Image
          path: ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image
          if-no-files-found: ignore
          retention-days: 7

      - name: üíô Upload Image.gz
        uses: actions/upload-artifact@v4
        env:
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-Image.gz
          path: ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz
          if-no-files-found: ignore
          retention-days: 7

      - name: üíô Upload Image.gz-dtb
        uses: actions/upload-artifact@v4
        env:
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-Image.gz-dtb
          path: ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz-dtb
          if-no-files-found: ignore
          retention-days: 7

      - name: üíú Upload dtb
        uses: actions/upload-artifact@v4
        env:
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-dtb
          path: ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtb
          if-no-files-found: ignore
          retention-days: 7

      - name: ‚ù§Ô∏è Upload dtbo.img
        uses: actions/upload-artifact@v4
        env:
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-dtbo.img
          path: ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtbo.img
          if-no-files-found: ignore
          retention-days: 7

      - name: ‚ò¢Ô∏è Upload output directory
        uses: actions/upload-artifact@v4
        env:
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-Output
          path: ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/
          retention-days: 7

      - name: ‚è∞ Pack Anykernel3
        if: ${{ env.USE_ANYKERNEL3 == 'true' }}
        env:
          PARAMS: "${{ toJSON(matrix.CONFIG.AnyKernel3) }}"
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
          ANYKERNEL3_FILE: "${{ env.WORKSPACE }}/AnyKernel3-${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}"
        run: |
          if echo -n '${{ env.PARAMS }}' | jq -e 'has("custom")' > /dev/null; then
            CUSTOM_ANYKERNEL3=$(echo -n '${{ env.PARAMS }}' | jq -r ".custom")
            ANYKERNEL_REPO=$(echo $CUSTOM_ANYKERNEL3 | jq -r ".repo")
            ANYKERNEL_BRANCH=$(echo $CUSTOM_ANYKERNEL3 | jq -r ".branch")
            git clone --recursive --depth=1 -j $(nproc) --branch $ANYKERNEL_BRANCH $ANYKERNEL_REPO AnyKernel3
            echo "ü§î Use custom AnyKernel3 => ($ANYKERNEL_REPO)"
          else
            git clone --recursive --depth=1 -j $(nproc) https://github.com/WildPlusKernel/AnyKernel3 AnyKernel3
            echo "ü§î Use WildPlus Anykernel3 => (https://github.com/WildPlusKernel/AnyKernel3)"
          fi

          if [ -e "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz-dtb" ]; then
            cp -f ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz-dtb ./AnyKernel3/
          else
            if [ -e "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image" ]; then
              cp -f ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image ./AnyKernel3/
            fi
            if [ -e "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtbo" ]; then
              cp -f ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtbo ./AnyKernel3/
            fi
            if [ -e "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtbo.img" ]; then
              cp -f ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtbo.img ./AnyKernel3/
            fi
          fi

          cd AnyKernel3/
          zip -q -r "${{ env.ANYKERNEL3_FILE }}.zip" *

      - name: "üíæ Upload AnyKernel3 image => (${{ env.BUILD_DATE }})"
        env:
          ANYKERNEL3_FILE: "AnyKernel3-${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}"
        uses: actions/upload-artifact@v4
        if: ${{ env.USE_ANYKERNEL3 == 'true' }}
        with:
          name: "${{ env.ANYKERNEL3_FILE }}"
          path: AnyKernel3/*

      - name: üßß Create GitHub Release => (${{ env.BUILD_DATE }})
        env:
          ANYKERNEL3_FILE: "${{ env.WORKSPACE }}/AnyKernel3-${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}"
        continue-on-error: true
        uses: softprops/action-gh-release@v2
        if: ${{ env.USE_ANYKERNEL3 == 'true' && env.CONFIRM_RELEASE == 'true' }}
        with:
          tag_name: v${{ env.BUILD_DATE }}.${{ github.run_number }}
          files: "${{ env.ANYKERNEL3_FILE }}.zip"
          generate_release_notes: true
